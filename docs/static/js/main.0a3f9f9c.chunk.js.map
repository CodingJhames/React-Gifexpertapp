{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAyB9C,OACI,0BAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAIGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACzCN,EAAc,OASd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAzBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,Y,uBCTjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAIfC,EAJe,iDAIkCC,UAAWH,GAJ7C,gEAKFI,MAAQF,GALN,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZrB,kBAgBdM,GAhBc,4CAAH,sDCCTO,EAAc,SAAC,GAAuB,IAApBH,EAAmB,EAAnBA,MAAOV,EAAY,EAAZA,IAIlC,OAFAc,QAAQC,IAAKL,EAAOV,GAGhB,yBAAKgB,UAAU,2CACZ,yBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,+BAAMA,EAAN,OCJES,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECCf,SAAEA,GAAe,IAAD,EAGdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAL2B,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAiCxC,OAzBAC,qBAAW,WAET1B,EAASC,GACR0B,MAAM,SAAAC,GAGDH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAOlB,CAAEtB,IAUEuB,EDvByBK,CAAc5B,GAAhC2B,EAXyB,EAW/BpB,KAAae,EAXkB,EAWlBA,QAOrB,OALAN,QAAQC,IAAKK,GAOT,oCACG,wBAAIJ,UAAU,2CAAd,IAA2DlB,EAA3D,KAEEsB,GAAW,uBAAGJ,UAAU,0CAAb,WAEf,yBAAKA,UAAU,aAOHS,EAAKlB,KAAK,SAAAC,GAAG,OACT,kBAAC,EAAD,eACAmB,IAAMnB,EAAIC,IACLD,UEFfoB,EAjCM,WAAQ,MAGY5C,mBAAU,CAAE,cAHxB,mBAGlB6C,EAHkB,KAGN9C,EAHM,KAazB,OACA,oCACI,6CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BAGA,4BAEQ8C,EAAWtB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACA6B,IAAQ7B,EACRA,SAAWA,UC1B/BgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.0a3f9f9c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    \r\n\r\n    const handleInputChange = ( e ) => {\r\n\r\n        setInputValue( e.target.value );\r\n        \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        \r\n        \r\n       \r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats =>  [ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n        //console.log( 'Submit hecho nikka!')\r\n       \r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n        \r\n            < input \r\n                type=\"text\"\r\n                value={ inputValue}\r\n                onChange={ handleInputChange }\r\n                \r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n\r\n export const  getGifs = async( category  ) => {\r\n\r\n        \r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit =10&api_key=7V9Rbsi1pUaW8V4VFJaEChcNg2YRSKo6`;\r\n    const resp = await fetch ( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    //setImages( gifs );\r\n    \r\n}","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url }  ) => {\r\n    \r\n    console.log( title, url );\r\n\r\n    return (\r\n        <div className=\"card  animate__animated animate__fadeIn\">\r\n           <img src={ url } alt={ title } />\r\n           <p> { title } </p> \r\n        </div>\r\n    )\r\n}\r\n","\r\nimport React from 'react';\r\nimport { useFecthGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    /* const [images, setImages] = useState([]);\r\n    //const [contador, setContador] = useState(0);\r\n    \r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then(  setImages );\r\n    }, [ category ] ) */\r\n    \r\n    const { data: imgs , loading }= useFecthGifs( category );\r\n\r\n    console.log( loading );\r\n    //console.log( data );\r\n\r\n    //getGifs();\r\n    \r\n    return (\r\n        \r\n        <> \r\n           <h3 className=\"card  animate__animated animate__fadeIn\"> { category } </h3>\r\n           \r\n           { loading && <p className=\"card  animate__animated animate__flash\">loading</p> }\r\n\r\n         <div className=\"card-grid\">\r\n            \r\n                \r\n            {/*  <h3> { contador } </h3> */}\r\n            {/* <button onClick={ () => setContador( contador + 1 ) } ></button>  */}\r\n               \r\n                 {\r\n                     imgs.map( img  => (\r\n                         <GifGridItem \r\n                         key={ img.id }\r\n                         { ...img } \r\n                         />   \r\n                     ) )\r\n                }\r\n\r\n                \r\n            </div>  \r\n        </>\r\n       \r\n    )\r\n}\r\n","import { useState, useEffect }  from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n\r\n\r\n\r\nexport const useFecthGifs = ( category ) => {\r\n\r\n   \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n     \r\n      getGifs( category)\r\n      .then( imgs => {\r\n       \r\n\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n    \r\n              });\r\n\r\n        \r\n      })\r\n\r\n    }, [ category])\r\n\r\n/* \r\n    setTimeout(() => {\r\n       setState({\r\n            data: [ 2,4,6,8,10 ],\r\n            loading: false\r\n        });\r\n    },3000); */\r\n\r\n    return state;\r\n\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = (  ) => {\r\n\r\n    //const categories = [ 'one punch', 'slam dunk', ' dragon ball '];\r\n    const [categories, setCategories ] = useState( [ 'slam dunk'] )\r\n\r\n   /*  const handleAdd = (  ) => {\r\n      \r\n        return setCategories( [...categories, 'yuyu hakusho', 'micho el mao mao',' bernal el mamerto ' ] );\r\n       \r\n    } */\r\n\r\n\r\n\r\n    return  (\r\n    <>\r\n        <h2>GifExpertApp </h2>\r\n        <AddCategory setCategories = { setCategories }/>\r\n        <hr /> \r\n\r\n        {/* <button onClick= {  handleAdd } >Agregar</button> */}\r\n        <ol>\r\n            {\r\n                categories.map(category => \r\n                    <GifGrid \r\n                    key = { category }\r\n                    category={ category } />\r\n                )\r\n            }\r\n        </ol>\r\n    </>\r\n   )\r\n}  \r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}